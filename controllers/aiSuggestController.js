// controllers/aiSuggestController.js
const genAI = require("../utils/geminiClient");
const redisClient = require("../utils/redisClient");
const Suggestion = require("../models/Suggestion");
const moodAnalyzer = require("../utils/moodAnalyzer");

const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });

const suggestHabit = async (req, res) => {
  const userId = req.user.uid;
  const cacheKey = `suggestion:${userId}`;
  
  try {
    // 1. Verificar cach√©
    const cached = await redisClient.get(cacheKey);
    if (cached) {
      console.log("üì¶ Sugerencia recuperada de Redis");
      return res.json(JSON.parse(cached));
    }

    // 2. Analizar √°nimo reciente del usuario
    console.log("üß† Analizando √°nimo reciente del usuario...");
    const moodAnalysis = await moodAnalyzer.weighMood(userId, 7);
    const frequentEmojis = await moodAnalyzer.getFrequentEmojis(userId, 7);
    
    console.log("üìä An√°lisis de √°nimo:", moodAnalysis);

    // 3. Generar prompt personalizado seg√∫n √°nimo
    const personalizedPrompt = generateMoodBasedPrompt(moodAnalysis, frequentEmojis);
    
    // 4. Generar sugerencia con Gemini
    console.log("‚ú® Solicitando sugerencia personalizada a Gemini...");
    const result = await model.generateContent(personalizedPrompt);
    const content = result.response.text().trim();
    console.log("‚úÖ Respuesta recibida de Gemini:", content);

    const match = content.match(/\{[\s\S]*?\}/);
    if (!match) throw new Error("No se encontr√≥ un bloque JSON en la respuesta de Gemini.");

    const suggestion = JSON.parse(match[0]);
    const level = Math.floor(Math.random() * 3) + 1;
    
    // 5. Agregar informaci√≥n del an√°lisis de √°nimo
    const response = { 
      ...suggestion, 
      level,
      moodBased: true,
      moodAnalysis: {
        overallMood: moodAnalysis.overallMood,
        trend: moodAnalysis.moodTrend,
        reason: moodAnalysis.reason
      }
    };

    // 6. Guardar en MongoDB con informaci√≥n de √°nimo
    await Suggestion.create({
      userId,
      suggestion: suggestion.title,
      reason: suggestion.reason,
      category: suggestion.category,
      frequency: suggestion.frequency,
      level,
      moodBased: true,
      moodContext: {
        overallMood: moodAnalysis.overallMood,
        averageScore: moodAnalysis.averageScore,
        trend: moodAnalysis.moodTrend,
        recommendationType: moodAnalysis.recommendation
      }
    });

    // 7. Guardar en Redis por 24h
    await redisClient.setEx(cacheKey, 60 * 60 * 24, JSON.stringify(response));

    return res.json(response);

  } catch (error) {
    console.error("‚ùå Error:", error.message);
    
    // Fallback con contexto de √°nimo si es posible
    try {
      const moodAnalysis = await moodAnalyzer.weighMood(userId, 7);
      const moodBasedFallback = getMoodBasedFallback(moodAnalysis.overallMood);
      
      return res.json({
        ...moodBasedFallback,
        note: "Sugerencia basada en tu √°nimo (modo offline)",
        level: 1,
        moodBased: true,
        moodAnalysis: {
          overallMood: moodAnalysis.overallMood,
          reason: moodAnalysis.reason
        }
      });
    } catch (fallbackError) {
      // Fallback general si todo falla
      const generalFallback = {
        title: "Respira profundo por 2 minutos",
        reason: "La respiraci√≥n consciente reduce el estr√©s y mejora el bienestar.",
        category: "Bienestar",
        frequency: "Diario"
      };
      
      return res.json({
        ...generalFallback,
        note: "Sugerencia general (error en an√°lisis)",
        level: 1,
        moodBased: false
      });
    }
  }
};

// Funci√≥n para generar prompt personalizado seg√∫n √°nimo
function generateMoodBasedPrompt(moodAnalysis, frequentEmojis) {
  const { overallMood, moodTrend, recommendation, reason } = moodAnalysis;
  
  let moodContext = "";
  let suggestionFocus = "";

  // Contexto seg√∫n √°nimo general
  switch (overallMood) {
    case 'positive':
      moodContext = "El usuario ha tenido un √°nimo positivo recientemente.";
      suggestionFocus = recommendation === 'maintenance' ? 
        "Sugiere h√°bitos para mantener este bienestar." :
        "Sugiere h√°bitos para potenciar a√∫n m√°s su energ√≠a positiva.";
      break;
    case 'negative':
      moodContext = "El usuario ha pasado por d√≠as dif√≠ciles recientemente.";
      suggestionFocus = recommendation === 'recovery' ?
        "Sugiere h√°bitos suaves de recuperaci√≥n y autocuidado." :
        "Sugiere h√°bitos de apoyo emocional y bienestar mental.";
      break;
    default:
      moodContext = "El usuario ha tenido un √°nimo estable recientemente.";
      suggestionFocus = "Sugiere h√°bitos equilibrados para mantener la estabilidad.";
  }

  // Contexto de emojis frecuentes
  const emojiContext = frequentEmojis.length > 0 ? 
    `Sus emojis m√°s usados son: ${frequentEmojis.map(e => e._id).join(', ')}.` : "";

  return `
Eres un experto en h√°bitos saludables y bienestar emocional.

CONTEXTO DEL USUARIO:
${moodContext}
${emojiContext}
Tendencia: ${moodTrend}
${reason}

INSTRUCCIONES:
${suggestionFocus}
La sugerencia debe ser emp√°tica y apropiada para su estado emocional actual.

Devuelve SOLO un JSON con los siguientes campos:
{
  "title": "Texto del h√°bito (m√°ximo 50 caracteres, sin comillas internas)",
  "reason": "Explicaci√≥n breve considerando su estado de √°nimo actual",
  "category": "Salud" | "Productividad" | "Bienestar" | "Otros",
  "frequency": "Diario" | "Semanal" | "Mensual"
}

‚úÖ IMPORTANTE:
- "title" no debe superar los 50 caracteres.
- "reason" debe mencionar c√≥mo esto puede ayudar con su √°nimo actual.
- No incluyas comentarios ni explicaci√≥n fuera del JSON.
- S√© emp√°tico y considerado con su estado emocional.
`;
}

// Fallbacks basados en √°nimo
function getMoodBasedFallback(overallMood) {
  const fallbacks = {
    positive: {
      title: "Comparte algo bueno con alguien",
      reason: "Compartir tu energ√≠a positiva fortalece las relaciones y mantiene tu buen √°nimo.",
      category: "Bienestar",
      frequency: "Diario"
    },
    negative: {
      title: "Escribe 3 cosas por las que est√°s agradecido",
      reason: "La gratitud ayuda a cambiar el enfoque hacia lo positivo en momentos dif√≠ciles.",
      category: "Bienestar", 
      frequency: "Diario"
    },
    neutral: {
      title: "Sal a caminar 10 minutos",
      reason: "El movimiento suave y el aire fresco pueden mejorar tu estado de √°nimo.",
      category: "Salud",
      frequency: "Diario"
    }
  };

  return fallbacks[overallMood] || fallbacks.neutral;
}

module.exports = suggestHabit;